EI =pd.read_excel('Energy Indicators.xls',skiprows=17, skip_footer=38)
EI=EI.dropna(axis= 1)
EI=EI.drop('Unnamed: 1',axis= 1)
EI=EI.rename(columns={'Unnamed: 2':'Country','Petajoules':'Energy Supply','Gigajoules':'Energy Supply per Capita','%':'% Renewable'})

EI['Energy Supply']=EI['Energy Supply']*1000000
EI['Energy Supply'].apply(lambda x : x if str(type(x))== "<class 'int'>" else np.NaN)


EI['Country']=EI['Country'].apply(lambda x : re.sub(r'[0-9]','',x))

EI['Country'].replace({'Republic of Korea': 'South Korea',
'United States of America': 'United States',
'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',
'China, Hong Kong Special Administrative Region': 'Hong Kong'},inplace= True)



EI['Country']=EI['Country'].apply(lambda x : re.sub(r'[0-9]','',x))
EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\.+','',str(x)))
EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\(.+\)','',str(x)).strip())
EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\s+',' ',str(x)).strip())

for i in EI.columns[1:3]:
    EI[i]=EI[i].apply(lambda x : re.sub(r'\.+','',str(x)))
    
EI=EI.replace('',np.NaN)


GDP = pd.read_csv('world_bank.csv',skiprows=4,header=None)
GDP=GDP.rename(columns=GDP.iloc[0])
GDP=GDP.drop(0)

GDP['Country Name']=GDP['Country Name'].replace({'Korea, Rep.': 'South Korea', 
'Iran, Islamic Rep.': 'Iran',
'Hong Kong SAR, China': 'Hong Kong'})

GDP.rename(columns={2006: '2006', 2007: '2007', 2008: '2008', 2009: '2009', 2010: '2010',
                                    2011: '2011', 2012: '2012', 2013: '2013', 2014: '2014', 2015: '2015'},inplace=True)

scimagojr=pd.read_excel('scimagojr-3.xlsx')

EI.set_index('Country',inplace=True)


GDP.set_index('Country Name',inplace=True)



scimagojr.set_index('Country',inplace=True)

GDP_EI = pd.merge(GDP,EI, how='inner',left_index=True,right_index=True)

GDP_Energy_ScimEn = pd.merge(GDP_EI,scimagojr, how='inner',left_index=True,right_index=True)


Demo=GDP_Energy_ScimEn[['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations', 'Citations per document', 'H index', 'Energy Supply', 'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']].copy()

Demo[Demo['Rank']<16]





















1


import pandas as pd
import numpy as np
import re
def answer_one():
    EI =pd.read_excel('Energy Indicators.xls',skiprows=17, skip_footer=38)
    EI=EI.dropna(axis= 1)
    EI=EI.drop('Unnamed: 1',axis= 1)
    EI=EI.rename(columns={'Unnamed: 2':'Country','Petajoules':'Energy Supply','Gigajoules':'Energy Supply per Capita','%':'% Renewable'})

    EI['Energy Supply']=EI['Energy Supply']*1000000
    EI['Energy Supply'].apply(lambda x : x if str(type(x))== "<class 'int'>" else np.NaN)


    EI['Country']=EI['Country'].apply(lambda x : re.sub(r'[0-9]','',x))

    EI['Country'].replace({'Republic of Korea': 'South Korea',
    'United States of America': 'United States',
    'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',
    'China, Hong Kong Special Administrative Region': 'Hong Kong'},inplace= True)



    EI['Country']=EI['Country'].apply(lambda x : re.sub(r'[0-9]','',x))
    EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\.+','',str(x)))
    EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\(.+\)','',str(x)).strip())
    EI['Country']=EI['Country'].apply(lambda x : re.sub(r'\s+',' ',str(x)).strip())

    for i in EI.columns[1:3]:
        EI[i]=EI[i].apply(lambda x : re.sub(r'\.+','',str(x)))

    EI=EI.replace('',np.NaN)


    GDP = pd.read_csv('world_bank.csv',skiprows=4,header=None)
    GDP=GDP.rename(columns=GDP.iloc[0])
    GDP=GDP.drop(0)

    GDP['Country Name']=GDP['Country Name'].replace({'Korea, Rep.': 'South Korea', 
    'Iran, Islamic Rep.': 'Iran',
    'Hong Kong SAR, China': 'Hong Kong'})

    GDP.rename(columns={2006: '2006', 2007: '2007', 2008: '2008', 2009: '2009', 2010: '2010',
                                        2011: '2011', 2012: '2012', 2013: '2013', 2014: '2014', 2015: '2015'},inplace=True)

    scimagojr=pd.read_excel('scimagojr-3.xlsx')

    EI.set_index('Country',inplace=True)


    GDP.set_index('Country Name',inplace=True)



    scimagojr.set_index('Country',inplace=True)

    GDP_EI = pd.merge(GDP,EI, how='inner',left_index=True,right_index=True)

    GDP_Energy_ScimEn = pd.merge(GDP_EI,scimagojr, how='inner',left_index=True,right_index=True)


    Demo=GDP_Energy_ScimEn[['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations', 'Citations per document', 'H index', 'Energy Supply', 'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']].copy()

    Demo[Demo['Rank']<16]
    
    return Demo[Demo['Rank']<16]

answer_one()


2

def answer_two():
    GDP_EI = pd.merge(GDP,EI, how='inner',left_index=True,right_index=True)

    GDP_Energy_ScimEn = pd.merge(GDP_EI,scimagojr, how='inner',left_index=True,right_index=True)



    GDP_EI_2 = pd.merge(GDP,EI, how='outer',left_index=True,right_index=True)

    GDP_Energy_ScimEn_2= pd.merge(GDP_EI_2 ,scimagojr, how='outer',left_index=True,right_index=True)
    x=GDP_Energy_ScimEn_2.shape[0]-GDP_Energy_ScimEn.shape[0]

    return x
answer_two()


3
def answer_three():
    Top15 = answer_one()
    aaa=Top15[['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']].mean(axis=1, skipna = True).sort_values(ascending= False )
    aaa.rename('avgGDP',inplace=True)
    return pd.Series(aaa)
answer_three()


4


def answer_four():
    Top15 = answer_one()
    country=pd.DataFrame(Top15[['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']].mean(axis=1, skipna = True).sort_values(ascending= False )).reset_index().iloc[5]['index']
    a=Top15.loc[Top15.index==country,'2015'][country]-Top15.loc[Top15.index==country,'2006'][country]
    return a
answer_four()


5

def answer_five():
    Top15 = answer_one()
    
    a=Top15['Energy Supply per Capita'].apply(lambda x : int(x)).mean()
    return float(a)
answer_five()
6


def answer_six():
    Top15 = answer_one()
    a=(Top15['% Renewable'].argmax(),Top15['% Renewable'].max())
    return a
answer_six()


def answer_seven():
    Top15 = answer_one()
    return ((Top15['Self-citations']/Top15['Citations']).argmax(),(Top15['Self-citations']/Top15['Citations']).max())
answer_seven()


8
def answer_eight():
    Top15 = answer_one()
    return pd.DataFrame(Top15['Energy Supply'].apply(lambda x : int(x))/Top15['Energy Supply per Capita'].apply(lambda x : int(x))).reset_index().sort_values(0,ascending=False).reset_index().loc[2,'index']
answer_eight()

10

def answer_ten():
    Top15 = answer_one()
    median = Top15['% Renewable'].median()
    return Top15['% Renewable'].apply(lambda x : 0 if x < median else 1 ).rename('HighRenew',inplace=True).sort_values()
answer_ten()

13

def answer_thirteen():
    Top15 = answer_one()
    return (Top15['Energy Supply'].apply(lambda x : int(x))/Top15['Energy Supply per Capita'].apply(lambda x : int(x))).rename('PopEst').apply(lambda x: '{:,}'.format(x))
answer_thirteen()


11


Top15['Population']=Top15['Energy Supply'].apply(lambda x : int(x))/Top15['Energy Supply per Capita'].apply(lambda x : int(x))


    